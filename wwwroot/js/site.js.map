{"version":3,"sources":["node_modules/browser-pack/_prelude.js","CommonLibs/Web/LongPolling/JSClient/Client.ts","CommonLibs/Web/LongPolling/JSClient/HttpClient.ts","CommonLibs/Web/LongPolling/JSClient/WebSocketClient.ts","Views/Home/Index.ts"],"names":[],"mappings":"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","file":"site.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","﻿import * as sock from './WebSocketClient';\r\nimport * as http from './HttpClient';\r\n\r\nexport var HttpClient = http.HttpClient;\r\nexport var WebSocketClient = sock.WebSocketClient;\r\n\r\nexport interface Message\r\n{\r\n\ttype\t\t\t\t: string;\r\n\treply_to_type?\t\t: string;\r\n\tsender?\t\t\t\t: string;\r\n\tchained_messages?\t: Message[];\r\n}\r\n// Use this when members are not to be strictly enforced (behaves as a regular dictionary):\r\nexport interface MessageDict extends Message\r\n{\r\n\t[key:string]:any;\r\n}\r\n\r\nexport interface EventsHandler\r\n{\r\n\tbind\t: (name:string, callback:(evt?:any,p?:any)=>void)=>EventsHandler;\r\n\tunbind\t: (name:string, callback?:(evt?:any,p?:any)=>void)=>EventsHandler;\r\n\ttrigger\t: (name:string, p?:any)=>EventsHandler;\r\n}\r\n\r\nexport interface MessageHandler\r\n{\r\n\tstart\t\t\t\t\t: ()=>void;\r\n\tgetStatus\t\t\t\t: ()=>ClientStatus;\r\n\tgetSyncedHandlerUrl\t\t: ()=>string;\r\n\tonConnectionIdReceived\t: (callback:(connectionId:string)=>void)=>MessageHandler;\r\n\tonStatusChanged\t\t\t: (callback:(status:ClientStatus)=>void)=>MessageHandler;\r\n\tonInternalError\t\t\t: (callback:(message:string)=>void)=>MessageHandler;\r\n\tonMessageHandlerFailed\t: (callback:(error:any)=>void)=>MessageHandler;\r\n\tbind\t\t\t\t\t: (name:string, callback:(evt?:any,message?:Message)=>void)=>EventsHandler;\r\n\tunbind\t\t\t\t\t: (name:string, callback?:(evt?:any)=>void)=>EventsHandler;\r\n\tsendMessage\t\t\t\t: (message:Message, callback?:(evt?:any,message?:Message)=>void)=>MessageHandler;\r\n}\r\n\r\nexport enum ClientStatus\r\n{\r\n\tDISCONNECTED,\t// When the connection to the server is not yet established or is lost\r\n\tCONNECTED,\t\t// When there is a polling request currently connected to the server.\r\n\tPENDING,\t\t// (NB: Only used by HttpClient) When the message request is currently sending messages to the server and there are messages pending in the queue\r\n\tRUNNING,\t\t// (NB: Only used by HttpClient) When the message request is currently sending messages to the server.\r\n};\r\n\r\nexport function createEventHandler() : EventsHandler\r\n{\r\n\treturn $({});\r\n}\r\n\r\nexport function Client(p:{\tdebug?\t\t\t\t\t\t: boolean,\r\n\t\t\t\t\t\t\thttpHandlerUrl?\t\t\t\t: string,\r\n\t\t\t\t\t\t\twebSocketHandlerUrl?\t\t: string,\r\n\t\t\t\t\t\t\twebSocketKeepAliveUrl?\t\t: string,\r\n\t\t\t\t\t\t\twebSocketKeepAliveTimeout?\t: number,\r\n\t\t\t\t\t\t\tsyncedHandlerUrl?\t\t\t: string,\r\n\t\t\t\t\t\t\tlogoutUrl\t\t\t\t\t: string\r\n\t\t\t\t\t}) : MessageHandler\r\n{\r\n\tvar canUseSocket : boolean = (p.webSocketHandlerUrl != null);\r\n\tcanUseSocket = ( canUseSocket && (typeof(WebSocket) != 'undefined') );\r\n\tvar canUseHttp : boolean = (p.httpHandlerUrl != null);\r\n\r\n\tif( p.debug )\r\n\t{\r\n\t\t// Check that console is available\r\n\t\tif( (typeof(console) == 'undefined') || (typeof(console.log) == 'undefined') )\r\n\t\t\t// Debugging not available\r\n\t\t\tp.debug = false;\r\n\t}\r\n\r\n\tif( canUseSocket )\r\n\t{\r\n\t\treturn new sock.WebSocketClient({ debug:p.debug, handlerUrl:p.webSocketHandlerUrl, keepAliveUrl:p.webSocketKeepAliveUrl, keepAliveTimeout:p.webSocketKeepAliveTimeout, syncedHandlerUrl:p.syncedHandlerUrl, logoutUrl:p.logoutUrl });\r\n\t}\r\n\telse if( canUseHttp )\r\n\t{\r\n\t\tvar client = http.HttpClient( p.httpHandlerUrl, p.syncedHandlerUrl, p.logoutUrl );\r\n\r\n\t\t// TODO: Alain: Cleanup 'HttpClient' & include 'sendMessage(message, callback)'\r\n\r\n\t\t// Override 'client.sendMessage()' to support a second argument: 'callback'\r\n\t\tvar sendMessageUid = 0;\r\n\t\tvar baseSendMessage = client.sendMessage;\r\n\t\tclient.sendMessage = function(message:Message, callback:any)\r\n\t\t\t{\r\n\t\t\t\tif( callback != null )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Attach the callback to a new one-shot message handler\r\n\t\t\t\t\tvar replyMessageHandler = 'commonlibs_message_handler_autoreply_' + (++ sendMessageUid);\r\n\t\t\t\t\tmessage[ 'reply_to_type' ] = replyMessageHandler;\r\n\r\n\t\t\t\t\tclient.bind( replyMessageHandler, function(evt:any, message:Message)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// The message has returned => unbind the one-shot message handler\r\n\t\t\t\t\t\t\tclient.unbind( replyMessageHandler );\r\n\r\n\t\t\t\t\t\t\t// Forward the message to the callback\r\n\t\t\t\t\t\t\tcallback( evt, message );\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Invoke original 'sendMessage()' function\r\n\t\t\t\tbaseSendMessage( message );\r\n\t\t\t};\r\n\r\n\t\treturn client;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tsock.error( 'Unable to find a suitable message handler protocol' );  // NB: Temporarily use the same error handler (until the whole 'utils.*.ts' are merged)\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nexport default Client;\r\n","﻿//\r\n// CommonLibs/Web/LongPolling/JSClient/HttpClient.ts\r\n//\r\n// Author:\r\n//   Alain CAO (alaincao17@gmail.com)\r\n//\r\n// Copyright (c) 2010 - 2018 Alain CAO\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining\r\n// a copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to\r\n// permit persons to whom the Software is furnished to do so, subject to\r\n// the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be\r\n// included in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n//\r\n\r\n// TODO: ACA: HttpClient: Rewrite in clean TypeScript !!!\r\n\r\nimport { Message, ClientStatus } from './Client';\r\n\r\ndeclare var $: any;\r\n\r\nexport function HttpClient(handlerUrl:string, syncedHandlerUrl:string, logoutUrl:string)\r\n{\r\n\tvar $this = $(this);\r\n\tthis.$this = $this;\r\n\tvar thisDOM = this;\r\n\r\n\t///////////////////////////\r\n\t// Reserved event names: //\r\n\t///////////////////////////\r\n\r\n\t// Bind to this event to be warned of changes in the connection status\r\n\t// Event parameter:\t'CONNECTED' when there is a polling request currently connected to the server.\r\n\t//\t\t\t\t\t'DISCONNECTED' when the connection to the server is lost (NB: Try run the 'verifyConnections()' method to try to reconnect to the server).\r\n\t//\t\t\t\t\t'RUNNING' when the message request is currently sending messages to the server.\r\n\t//\t\t\t\t\t'PENDING' when the message request is currently sending messages to the server and there are messages pending in the queue\r\n\t$this.statusChangedEvent = \"long_polling_client_status_changed\";\r\n\r\n\t// Bind to this event to receive errors when an assigned message handler threw an exception.\r\n\t// Event parameter: The error object threw by the assigned message handler as receivd by the catch().\r\n\t$this.messageHandlerFailedEvent = 'message_handler_failed';\r\n\r\n\t// Bind to this event to get error messages when an internal error occures inside the LongPollingClient object\r\n\t// Event parameter: A description string of the error\r\n\t$this.internalErrorEvent = 'long_polling_client_error';\r\n\r\n\t// Bind to this event to receive the ConnectionID that has been assigned to this LongPollingClient as soon as it has been received\r\n\t// Event parameter: The ConnectionID (string)\r\n\t$this.connectionIDReceivedEvent = 'long_polling_client_connection_id';\r\n\r\n\t///////////////////////\r\n\t// Member variables: //\r\n\t///////////////////////\r\n\r\n\tthis.__status\t\t\t\t\t= ClientStatus.DISCONNECTED;\r\n\r\n\t// URL of the server-side message handler\r\n\tthis.__handlerUrl\t\t\t\t= handlerUrl;\r\n\t// URL of the server-side synced handler\r\n\tthis.__syncedHandlerUrl\t\t\t= syncedHandlerUrl;\r\n\t// URL of the logout page\r\n\tthis.__logoutUrl\t\t\t\t= logoutUrl;\r\n\r\n\t// The only 2 HTTP requests that can be running at the same time:\r\n\tthis.__pollingRequest\t\t\t= null;\r\n\tthis.__messageRequest\t\t\t= null;\r\n\r\n\t// This client's SenderID\r\n\tthis.__connectionID\t\t\t\t= null;\r\n\r\n\t// The list of messages that are waiting for the __messageRequest to be available\r\n\tthis.__pendingMessages\t\t\t= null;\r\n\r\n\t//////////////\r\n\t// Methods: //\r\n\t//////////////\r\n\r\n\tthis.getSyncedHandlerUrl = function()\r\n\t{\r\n\t\treturn this.__syncedHandlerUrl;\r\n\t}\r\n\r\n\tthis.getStatus = function()\r\n\t{\r\n\t\tvar newStatus;\r\n\t\tif( this.__pollingRequest == null )\r\n\t\t{\r\n\t\t\tnewStatus = ClientStatus.DISCONNECTED;\r\n\t\t}\r\n\t\telse if( this.__messageRequest != null )\r\n\t\t{\r\n\t\t\tif( this.__pendingMessages != null )\r\n\t\t\t\tnewStatus = ClientStatus.PENDING;\r\n\t\t\telse\r\n\t\t\t\tnewStatus = ClientStatus.RUNNING;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tnewStatus = ClientStatus.CONNECTED;\r\n\t\t}\r\n\r\n\t\tif( this.__status != newStatus )\r\n\t\t{\r\n\t\t\tthis.__status = newStatus;\r\n\t\t\ttry { this.$this.trigger( this.$this.statusChangedEvent, newStatus ); } catch(err) {}\r\n\t\t}\r\n\t\treturn newStatus;\r\n\t}\r\n\r\n\tthis.onConnectionIdReceived = function(callback:(cid:string)=>void)\r\n\t{\r\n\t\tif( this.__connectionID != null )\r\n\t\t{\r\n\t\t\t// There is already a ConnectionID => Invoke callback right now\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tcallback( this.__connectionID );\r\n\t\t\t} catch( err ) {\r\n\t\t\t\t// The assigned message handler threw an exception\r\n\t\t\t\ttry { this.$this.trigger( this.messageHandlerFailedEvent, err ); } catch(err) {}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// The ConnectionID is not received yet => Bind the callback to the 'connectionIDReceivedEvent' trigger\r\n\t\t\tthis.$this.bind( this.$this.connectionIDReceivedEvent, (function(cb)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn function(evt:any,connectionID:string)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcb( connectionID );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})(callback) );\r\n\t\t}\r\n\t}\r\n\r\n\tthis.verifyConnections = function()\r\n\t{\r\n\t\tvar message : any;\r\n\r\n\t\tif( this.__pollingRequest == null )\r\n\t\t{\r\n\t\t\t// The polling request must be (re)started => Send a simple poll request\r\n//console.log( 'POLL' );\r\n\t\t\tmessage = {\t'type': 'poll',\r\n\t\t\t\t\t\t'sender': this.__connectionID };\r\n\t\t\tthis.__pollingRequest = new XMLHttpRequest();\r\n\t\t\tthis.__send( this.__pollingRequest, message );\r\n\t\t}\r\n\t\tif( this.__messageRequest == null )\r\n\t\t{\r\n\t\t\t// There is no request currently running\r\n\r\n\t\t\tif( this.__pendingMessages == null )\r\n\t\t\t\t// No pending message\r\n\t\t\t\treturn;\r\n\t\t\tif( this.__connectionID == null )\r\n\t\t\t\t// No ConnectionID available yet (wait for init() to terminate...)\r\n\t\t\t\treturn;\r\n\r\n\t\t\t// Create message list with all the pending messages\r\n\t\t\tvar messageContents = [];\r\n\t\t\tfor( var i=0; i<this.__pendingMessages.length; ++i )\r\n\t\t\t{\r\n\t\t\t\tvar messageItem = this.__pendingMessages[ i ];\r\n\r\n\t\t\t\t// Add message content to send\r\n\t\t\t\tmessage = messageItem[ 'content' ];\r\n\t\t\t\tmessageContents.push( message );\r\n//console.log( 'SND', message );\r\n\t\t\t}\r\n\r\n\t\t\t// Send message\r\n\t\t\tmessage = {\t'type': 'messages',\r\n\t\t\t\t\t\t'sender': this.__connectionID,\r\n\t\t\t\t\t\t'messages': messageContents };\r\n\t\t\tthis.__messageRequest = new XMLHttpRequest();\r\n\t\t\tthis.__send( this.__messageRequest, message );\r\n\t\t\tthis.__pendingMessages = null;  // No more pending messages\r\n\t\t}\r\n\t}\r\n\r\n\tthis.sendMessages = function(messages:Message[])\r\n\t{\r\n\t\tif( this.__pendingMessages == null )\r\n\t\t\tthis.__pendingMessages = [];\r\n\r\n\t\tfor( var i=0; i<messages.length; ++i )\r\n\t\t{\r\n\t\t\tvar messageItem = { 'content': messages[i] };\r\n\t\t\tthis.__pendingMessages.push( messageItem );\r\n\t\t}\r\n\r\n\t\t// Send pending messages if the request is available\r\n\t\tthis.verifyConnections();\r\n\t\tthis.getStatus();\r\n\t}\r\n\r\n\tthis.start = function()\r\n\t{\r\n\t\tvar self = this;\r\n\r\n\t\t// Start the __pollingRequest\r\n\t\tvar message = { 'type': 'init' };\r\n\t\tvar pendingQuery = new XMLHttpRequest();\r\n\t\tself.__pollingRequest = pendingQuery;  // Assign this member immediately so that 'verifyConnections()' doesn't create its own query\r\n\t\tvar sendRequestFunction = function()\r\n\t\t\t{\r\n\t\t\t\tself.__send( pendingQuery, message );\r\n\t\t\t};\r\n\r\n//\t\tif( $.browser.safari || $.browser.opera )\r\n//\t\t{\r\n//\t\t\t// Opera & Safari thinks the page is still loading until all the initial requests are terminated (which never happens in case of a long-polling...)\r\n//\t\t\t// => Those browsers shows the 'turning wait icon' indefinitely (Safari) or even worse never show the page! (Opera)\r\n\r\n//\t\t\t// Add a delay before sending the initial long-polling query\r\n//\t\t\tself.$this.delay( 300 ).queue( function(){ sendRequestFunction(); } );\r\n//\t\t}\r\n//\t\telse\r\n//\t\t{\r\n\t\t\t// Other browsers => sending the initial long-polling query immediately\r\n\t\t\tsendRequestFunction();\r\n//\t\t}\r\n\r\n\t\t$(window).on( 'unload', function()\r\n\t\t\t{\r\n\t\t\t\t// When leaving the page, explicitly abort the polling requests because IE keeps them alive!!!\r\n\t\t\t\ttry { self.__pollingRequest.abort(); }\r\n\t\t\t\tcatch( err ) {}\r\n\r\n\t\t\t\t// Kill also the \"request\" request if any\r\n\t\t\t\ttry { self.__messageRequest.abort(); }\r\n\t\t\t\tcatch( err ) {}\r\n\t\t\t} );\r\n\t}\r\n\r\n\tthis.__send = function(requestObject:XMLHttpRequest, messageObject:Message)\r\n\t{\r\n\t\tvar strMessageObject = JSON.stringify( messageObject );\r\n\t\trequestObject.open( \"POST\", this.__handlerUrl, true );\r\n\t\trequestObject.setRequestHeader( \"Content-Type\", \"application/x-www-form-urlencoded\" );\r\n\r\n\t\tvar callback = (function(self,req) {\r\n\t\t\t\treturn function() { self.__onRequestStateChange(req); };\r\n\t\t\t})( this, requestObject );\r\n\t\trequestObject.onreadystatechange = callback;\r\n\r\n\t\trequestObject.send( strMessageObject );\r\n\t};\r\n\r\n\tthis.__onRequestStateChange = function(request:XMLHttpRequest)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif( request.readyState == 4 )\r\n\t\t\t{\r\n\t\t\t\tif( request == this.__pollingRequest )\r\n\t\t\t\t{\r\n\t\t\t\t\t// The __pollingRequest ended\r\n\t\t\t\t\tthis.__pollingRequest = null;\r\n\t\t\t\t}\r\n\t\t\t\telse if( request == this.__messageRequest )\r\n\t\t\t\t{\r\n\t\t\t\t\t// The __messageRequest ended\r\n\t\t\t\t\tthis.__messageRequest = null;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\ttry { this.$this.trigger( this.$this.internalErrorEvent, 'Received a response from an unknown request' ); } catch(err) {}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif( request.status == 200 )  // HTTP 200 OK\r\n\t\t\t\t{\r\n\t\t\t\t\tvar strResponse = request.responseText;\r\n\t\t\t\t\tvar response;\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresponse = JSON.parse( strResponse );\r\n\t\t\t\t\t\tvar responseType = response[ 'type' ];\r\n\t\t\t\t\t\tif( responseType == 'init' )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.__connectionID = response[ 'sender' ];\r\n//console.log( 'CID', this.__connectionID );\r\n\r\n\t\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.$this.trigger( this.$this.connectionIDReceivedEvent, this.__connectionID );\r\n\t\t\t\t\t\t\t} catch( err ) {\r\n\t\t\t\t\t\t\t\t// The assigned message handler threw an exception\r\n\t\t\t\t\t\t\t\ttry { this.$this.trigger( this.$this.messageHandlerFailedEvent, err ); } catch(err) {}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Initiate initial connection\r\n\t\t\t\t\t\t\tthis.verifyConnections();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if( responseType == 'reset' )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Restart the __pollingRequest\r\n\t\t\t\t\t\t\tthis.verifyConnections();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if( responseType == 'logout' )\r\n\t\t\t\t\t\t{\r\n//console.log( 'LOGOUT' );\r\n\t\t\t\t\t\t\twindow.location.href = this.__logoutUrl;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if( responseType == 'messages' )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar messagesList = response[ 'messages' ];\r\n\t\t\t\t\t\t\tfor( var i=0; i<messagesList.length; ++i )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tvar messageContent = messagesList[ i ];\r\n\t\t\t\t\t\t\t\t\tvar type = messageContent[ 'type' ];\r\n//console.log( 'RCV', messageContent );\r\n\t\t\t\t\t\t\t\t\tthis.$this.trigger( type, messageContent );\r\n\t\t\t\t\t\t\t\t} catch( err ) {\r\n\t\t\t\t\t\t\t\t\t// The assigned message handler threw an exception\r\n\t\t\t\t\t\t\t\t\ttry { this.$this.trigger( this.$this.messageHandlerFailedEvent, err ); } catch(err) {}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis.verifyConnections();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrow 'Unknown response type \\'' + responseType + '\\'';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch( err ) {\r\n\t\t\t\t\t\ttry { this.$this.trigger( this.$this.internalErrorEvent, 'JSON Parse Error: ' + err ); } catch(err) {}\r\n\t\t\t\t\t\tthis.verifyConnections();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if( (request.status == 0/*All browsers*/) || (request.status == 12031/*Only IE*/) )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Request aborted (e.g. redirecting to another page)\r\n\t\t\t\t\t// this.verifyConnections();  <= Don't try to reconnect\r\n\t\t\t\t}\r\n\t\t\t\telse if( request.status == 12002/*Only IE*/ )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Request timeout\r\n//console.log( '__onRequestStateChange - request.status=12002 (timeout)' );\r\n// TODO: Alain: Warning (?)\r\n\t\t\t\t\tthis.verifyConnections();  // Try reconnect\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\ttry { this.$this.trigger( this.$this.internalErrorEvent, 'Server error (status=\"' + request.status + '\")' ); } catch(err) {}\r\n// TODO: Alain: Maximum number of retry then definitely disconnect\r\n\t\t\t\t\t//window.location = this.__logoutUrl;  // Redirect to logout page\r\n\t\t\t\t\tthis.verifyConnections();  // Try reconnect\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// \"readyState != 4\" == still running\r\n\t\t\t\t// NOOP\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\tthis.getStatus();\r\n\t\t}\r\n\t};\r\n\r\n\t////////////////////////////////////////////////////////////////\r\n\t// Redirected functions 'jquery object' => 'original object': //\r\n\t////////////////////////////////////////////////////////////////\r\n\r\n\t$this.start\t\t\t\t\t\t= function() { thisDOM.start(); };\r\n\t$this.getSyncedHandlerUrl\t\t= function() { return thisDOM.getSyncedHandlerUrl(); };\r\n\t$this.getStatus\t\t\t\t\t= function() { return thisDOM.getStatus(); };\r\n\t$this.sendMessage\t\t\t\t= function(message:Message) { thisDOM.sendMessages( [message] ); };\r\n\t$this.sendMessages\t\t\t\t= function(messages:Message[]) { thisDOM.sendMessages( messages ); };\r\n\t$this.verifyConnections\t\t\t= function() { thisDOM.verifyConnections(); };\r\n\r\n\t/////////////////////////////////////\r\n\t// Implement Client.MessageHandler //\r\n\t/////////////////////////////////////\r\n\r\n\t$this.onConnectionIdReceived = function(callback:(cid:string)=>void)\r\n\t\t{\r\n\t\t\tthisDOM.onConnectionIdReceived(callback);\r\n\t\t\treturn $this;\r\n\t\t};\r\n\t$this.onStatusChanged = function(callback:(status:ClientStatus)=>void)\r\n\t\t{\r\n\t\t\t$this.bind( $this.statusChangedEvent, function(evt:any, status:ClientStatus)\r\n\t\t\t\t{\r\n\t\t\t\t\tcallback( status );\r\n\t\t\t\t} );\r\n\t\t\treturn $this;\r\n\t\t};\r\n\t$this.onInternalError = function(callback:(message:string)=>void)\r\n\t\t{\r\n\t\t\t$this.bind( $this.internalErrorEvent, function(e:any,message:string)\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcallback(message);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(err)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// NB: Really not much we can do here ...\r\n\t\t\t\t\t\tif( (console != null) && (console.error != null) )\r\n\t\t\t\t\t\t\tconsole.error( 'Error while invoking long_polling_client_error event', err );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\treturn $this;\r\n\t\t};\r\n\t$this.onMessageHandlerFailed = function(callback:(message:string)=>void)\r\n\t\t{\r\n\t\t\t$this.bind( $this.messageHandlerFailedEvent, function(evt:any,error:any)\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcallback(error);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(err)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t$this.trigger( $this.internalErrorEvent, 'Error while invoking message_handler_failed event: '+err );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\treturn $this;\r\n\t\t};\r\n\r\n\t/////////////////////\r\n\t// Initialization: //\r\n\t/////////////////////\r\n\r\n\t// Return the JQuery object\r\n\treturn $this;\r\n}\r\n\r\nexport default HttpClient;\r\n","﻿//\r\n// CommonLibs/Web/LongPolling/JSClient/WebSocketClient.ts\r\n//\r\n// Author:\r\n//   Alain CAO (alain.cao@sigmaconso.com)\r\n//\r\n// Copyright (c) 2018 SigmaConso\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining\r\n// a copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to\r\n// permit persons to whom the Software is furnished to do so, subject to\r\n// the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be\r\n// included in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n//\r\n\r\nimport { MessageHandler, EventsHandler, ClientStatus, Message, createEventHandler } from \"./Client\";\r\n\r\ndeclare var $: any;\r\n\r\nexport function error(message:string)\r\n{\r\n\talert( message );\r\n\tthrow message;\r\n}\r\n\r\nexport class WebSocketClient implements MessageHandler\r\n{\r\n\tprivate\tevents\t\t\t\t: EventsHandler;\r\n\tpublic\tdebug\t\t\t\t: boolean;\r\n\r\n\tprivate\thandlerUrl\t\t\t: string;\r\n\tprivate\tlogoutUrl\t\t\t: string;\r\n\tprivate\tkeepAliveUrl\t\t: string;\r\n\tprivate\tkeepAliveTimeout\t: number;\r\n\tprivate\tkeepAliveTimer\t\t: number;\r\n\tprivate\tsyncedHandlerUrl\t: string;\r\n\tprivate\tstatus\t\t\t\t: ClientStatus;\r\n\tprivate\tconnectionId\t\t: string;\r\n\tprivate\twebSocket\t\t\t: WebSocket;\r\n\tprivate\tsendMessageUid\t\t: number;\r\n\tprivate\tpendingMessages\t\t: { message:Message, callback?:(evt?:any,message?:Message)=>void }[];\r\n\r\n\tpublic\tstart\t\t\t\t\t\t: ()=>void;\r\n\tpublic\tsendMessage\t\t\t\t\t: (message:Message, callback?:(evt?:any,message?:Message)=>void)=>WebSocketClient;\r\n\tprivate sendPendingMessages\t\t\t: ()=>void;\r\n\tpublic\tgetConnectionId\t\t\t\t: ()=>string;\r\n\tpublic\tgetStatus\t\t\t\t\t: ()=>ClientStatus;\r\n\tprivate\tcheckKeepAliveTimeout\t\t: ()=>void;\r\n\tpublic\tgetSyncedHandlerUrl\t\t\t: ()=>string;\r\n\r\n\t// For EventsHandler:\r\n\tpublic\tbind\t\t\t\t\t\t: (name:string, callback:(evt?:any,message?:Message)=>void)=>EventsHandler;\r\n\tpublic\tunbind\t\t\t\t\t\t: (name:string, callback?:(evt?:any)=>void)=>EventsHandler;\r\n\tpublic\ttrigger\t\t\t\t\t\t: (name:string, p?:any)=>EventsHandler;\r\n\r\n\t// Events:\r\n\tprivate\ttriggerStatusChanged\t\t: (status:ClientStatus)=>void;\r\n\tpublic\tonStatusChanged\t\t\t\t: (callback:(status:ClientStatus)=>void)=>WebSocketClient;\r\n\tprivate\ttriggerInternalError\t\t: (message:string)=>void;\r\n\tpublic\tonInternalError\t\t\t\t: (callback:(message:string)=>void)=>WebSocketClient;\r\n\tprivate\ttriggerMessageHandlerFailed\t: (error:any)=>void;\r\n\tpublic\tonMessageHandlerFailed\t\t: (callback:(error:any)=>void)=>WebSocketClient;\r\n\tprivate\ttriggerConnectionIdReceived : (connectionId:string)=>void;\r\n\tpublic\tonConnectionIdReceived\t\t: (callback:(connectionId:string)=>void)=>WebSocketClient;\r\n\r\n\tconstructor(p:{\tdebug?\t\t\t\t: boolean,\r\n\t\t\t\t\thandlerUrl\t\t\t: string,\t// Required: The URL of the server's WebSocket listener\r\n\t\t\t\t\tkeepAliveUrl?\t\t: string,\t// Optional: Set to create a dummy HTTP request to keep the ASP.NET session alive\r\n\t\t\t\t\tkeepAliveTimeout?\t: number,\t// Optional: If 'keepAliveUrl' is set, this will be the interval between the dummy HTTP requests (default: 10*60*1000 miliseconds = 10 minutes)\r\n\t\t\t\t\tlogoutUrl\t\t\t: string,\t// Required: The URL to redirect to when the server asks to logout\r\n\t\t\t\t\tsyncedHandlerUrl?\t: string })\t// Optional: The URL to the Synced HTTP handler if used (e.g. file uploads)\r\n\t{\r\n\t\tp = $.extend( {\tdebug\t\t\t\t: false,\r\n\t\t\t\t\t\thandlerUrl\t\t\t: 'HANDLER_URL_UNDEFINED',\r\n\t\t\t\t\t\tkeepAliveUrl\t\t: null,\r\n\t\t\t\t\t\tkeepAliveTimeout\t: 600000,\r\n\t\t\t\t\t\tlogoutUrl\t\t\t: 'LOGOUT_URL_UNDEFINED',\r\n\t\t\t\t\t\tsyncedHandlerUrl\t: null,\r\n\t\t\t\t\t}, p );\r\n\t\tvar self = this;\r\n\r\n\t\tself.events\t\t\t\t= createEventHandler();\r\n\t\tself.debug\t\t\t\t= (p.debug == true);\r\n\t\tself.handlerUrl\t\t\t= p.handlerUrl;\r\n\t\tself.keepAliveUrl\t\t= p.keepAliveUrl;\r\n\t\tself.keepAliveTimeout\t= p.keepAliveTimeout;\r\n\t\tself.keepAliveTimer\t\t= null;\r\n\t\tself.logoutUrl\t\t\t= p.logoutUrl;\r\n\t\tself.syncedHandlerUrl\t= p.syncedHandlerUrl;\r\n\t\tself.status\t\t\t\t= ClientStatus.DISCONNECTED;\r\n\t\tself.connectionId\t\t= null;\r\n\t\tself.webSocket\t\t\t= null;\r\n\t\tself.sendMessageUid\t\t= 0;\r\n\t\tself.pendingMessages\t= [];\r\n\r\n\t\t// Redirect jQuery's methods to 'self.events'\r\n\t\tself.bind\t\t\t\t\t\t= function(){ return self.events.bind.apply( self.events, arguments ); };\r\n\t\tself.unbind\t\t\t\t\t\t= function(){ return self.events.unbind.apply( self.events, arguments ); };\r\n\t\tself.trigger\t\t\t\t\t= function(){ return self.events.trigger.apply( self.events, arguments ); };\r\n\r\n\t\t// Misc\r\n\t\tself.getSyncedHandlerUrl = function(){ return self.syncedHandlerUrl; };\r\n\r\n\t\t// Init event handlers\r\n\r\n\t\tself.triggerInternalError = function(message:string)\r\n\t\t\t{\r\n\t\t\t\tself.events.trigger( 'long_polling_client_error', message );\r\n\t\t\t};\r\n\t\tself.onInternalError = function(callback:(message:string)=>void)\r\n\t\t\t{\r\n\t\t\t\tself.events.bind( 'long_polling_client_error', function(e,message:string)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcallback(message);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(err)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// NB: Really not much we can do here ...\r\n\t\t\t\t\t\t\tif( (console != null) && (console.error != null) )\r\n\t\t\t\t\t\t\t\tconsole.error( 'Error while invoking long_polling_client_error event', err );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\treturn self;\r\n\t\t\t};\r\n\r\n\t\tself.triggerStatusChanged = function(status:ClientStatus)\r\n\t\t\t{\r\n\t\t\t\tself.events.trigger( 'long_polling_client_status_changed', status );\r\n\t\t\t}\r\n\t\tself.onStatusChanged = function(callback:(status:ClientStatus)=>void)\r\n\t\t\t{\r\n\t\t\t\tself.events.bind( 'long_polling_client_status_changed', function(evt,status:ClientStatus)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry { callback(status); }\r\n\t\t\t\t\t\tcatch(err) { self.triggerInternalError( 'Error while invoking long_polling_client_status_changed event: '+err ); }\r\n\t\t\t\t\t} );\r\n\t\t\t\treturn self;\r\n\t\t\t};\r\n\r\n\t\tself.triggerMessageHandlerFailed = function(error:any)\r\n\t\t\t{\r\n\t\t\t\tself.events.trigger( 'message_handler_failed', error );\r\n\t\t\t}\r\n\t\tself.onMessageHandlerFailed = function(callback:(message:string)=>void)\r\n\t\t\t{\r\n\t\t\t\tself.events.bind( 'message_handler_failed', function(evt,error:any)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry { callback(error); }\r\n\t\t\t\t\t\tcatch(err) { self.triggerInternalError( 'Error while invoking message_handler_failed event: '+err ); }\r\n\t\t\t\t\t} );\r\n\t\t\t\treturn self;\r\n\t\t\t};\r\n\r\n\t\tself.triggerConnectionIdReceived = function(connectionId:string)\r\n\t\t\t{\r\n\t\t\t\tself.events.trigger( 'long_polling_client_connection_id', connectionId );\r\n\t\t\t};\r\n\t\tself.onConnectionIdReceived = function(callback:(connectionId:string)=>void)\r\n\t\t\t{\r\n\t\t\t\tif( self.connectionId != null )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Already received\r\n\t\t\t\t\tcallback( self.connectionId );\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse // Defer\r\n\t\t\t\t{\r\n\t\t\t\t\tself.events.bind( 'long_polling_client_connection_id', function(evt,connectionId:string)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttry { callback(connectionId); }\r\n\t\t\t\t\t\t\tcatch(err) { self.triggerInternalError( 'Error while invoking long_polling_client_connection_id event: '+err ); }\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t\treturn self;\r\n\t\t\t};\r\n\r\n\t\tself.getConnectionId\t\t\t= function(){ return self.connectionId; };\r\n\t\tself.getStatus\t\t\t\t\t= function(){ return self.status; };\r\n\r\n\t\t// Init WebSocket communications\r\n\r\n\t\tvar onSocketError = function(e:any)\r\n\t\t\t{\r\n\t\t\t\tif( self.debug )\r\n\t\t\t\t\tconsole.log( 'WebSocket error', e );\r\n\r\n\t\t\t\tself.triggerInternalError( 'WebSocket error: '+e.message );\r\n\t\t\t};\r\n\r\n\t\tvar onSocketClose = function()\r\n\t\t\t{\r\n\t\t\t\tif( self.debug )\r\n\t\t\t\t\tconsole.log( 'WebSocket closed' );\r\n\r\n\t\t\t\tself.connectionId = null;\r\n\t\t\t\tself.webSocket = null;\r\n\r\n\t\t\t\tself.status = ClientStatus.DISCONNECTED;\r\n\t\t\t\tself.triggerStatusChanged( self.status );\r\n\t\t\t};\r\n\r\n\t\tvar onSocketMessageInit = function(e:any)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tvar errorPrefix = 'JSON Parse Error: ';\r\n\t\t\t\t\tvar message = JSON.parse( e.data );\r\n\t\t\t\t\tvar errorPrefix = '';\r\n\r\n\t\t\t\t\tvar type = message['type'];\r\n\t\t\t\t\tif( type != 'init' )\r\n\t\t\t\t\t\tthrow 'Unexpected message type \"'+type+'\" ; Expected \"init\"';\r\n\r\n\t\t\t\t\tvar connectionId = message['sender'];\r\n\t\t\t\t\tif( connectionId == null )\r\n\t\t\t\t\t\tthrow 'Server did not responded with ConnectionID';\r\n\t\t\t\t\tself.connectionId = connectionId;\r\n\r\n\t\t\t\t\tif( self.debug )\r\n\t\t\t\t\t\tconsole.log( 'message recv', message );\r\n\r\n\t\t\t\t\t// Ready to receive & subsequent messages must go to the 'onMessage' handler\r\n\t\t\t\t\tself.status = ClientStatus.CONNECTED;\r\n\t\t\t\t\tself.webSocket.onmessage = onSocketMessage;\r\n\r\n\t\t\t\t\t// Start keepalive timer\r\n\t\t\t\t\tvar errorPrefix = 'Could not start keepalive timer: ';\r\n\t\t\t\t\tself.checkKeepAliveTimeout();\r\n\t\t\t\t}\r\n\t\t\t\tcatch( err )\r\n\t\t\t\t{\r\n\t\t\t\t\ttry { self.triggerInternalError( errorPrefix+err ); } catch(err) {}\r\n\t\t\t\t\treturn;  // Fatal ; Stop here ...\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Invoke events\r\n\t\t\t\tself.triggerStatusChanged( self.status );\r\n\t\t\t\tself.triggerConnectionIdReceived( self.connectionId );\r\n\r\n\t\t\t\t// Check for any pending messages\r\n\t\t\t\tself.sendPendingMessages();\r\n\t\t\t};\r\n\r\n\t\tvar onSocketMessage = function(e:any)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tvar errorPrefix = 'JSON Parse Error: ';\r\n\t\t\t\t\tvar response = JSON.parse( e.data );\r\n\t\t\t\t\terrorPrefix = '';\r\n\r\n\t\t\t\t\tvar responseType = response[ 'type' ];\r\n\t\t\t\t\tif( responseType == 'reset' )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Ignore (should not happen?)\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if( responseType == 'logout' )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twindow.location.href = self.logoutUrl;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if( responseType == 'messages' )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar messagesList = response[ 'messages' ];\r\n\t\t\t\t\t\tfor( var i=0; i<messagesList.length; ++i )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar messageContent = messagesList[ i ];\r\n\t\t\t\t\t\t\t\tvar type = messageContent[ 'type' ];\r\n\r\n\t\t\t\t\t\t\t\tif( self.debug )\r\n\t\t\t\t\t\t\t\t\tconsole.log( 'message recv', messageContent );\r\n\r\n\t\t\t\t\t\t\t\tself.trigger( type, messageContent );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch( err )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// The assigned message handler threw an exception\r\n\t\t\t\t\t\t\t\tself.triggerMessageHandlerFailed( err );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrow 'Unknown response type \"' + responseType + '\"';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch( err )\r\n\t\t\t\t{\r\n\t\t\t\t\tself.triggerInternalError( errorPrefix+err );\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\tself.start = function()\r\n\t\t\t{\r\n\t\t\t\tif( self.debug )\r\n\t\t\t\t\tconsole.log( 'WebSocket connecting \"'+self.handlerUrl+'\"' );\r\n\t\t\t\tself.webSocket = new WebSocket( self.handlerUrl );\r\n\t\t\t\tself.webSocket.onerror = onSocketError;\r\n\t\t\t\tself.webSocket.onclose = onSocketClose;\r\n\t\t\t\tself.webSocket.onmessage = onSocketMessageInit;\r\n\t\t\t\tself.webSocket.onopen = function()\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar message = { 'type' : 'init' };\r\n\t\t\t\t\t\tif( self.debug )\r\n\t\t\t\t\t\t\tconsole.log( 'message send', message );\r\n\t\t\t\t\t\t// Send init message\r\n\t\t\t\t\t\tself.webSocket.send( JSON.stringify(message) );\r\n\t\t\t\t\t};\r\n\t\t\t};\r\n\r\n\t\tself.checkKeepAliveTimeout = function()\r\n\t\t\t{\r\n\t\t\t\tif( self.keepAliveUrl == null )\r\n\t\t\t\t\t// Nothing to do\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\tif( self.getStatus() == ClientStatus.CONNECTED )\r\n\t\t\t\t{\r\n\t\t\t\t\tif( self.keepAliveTimer != null )\r\n\t\t\t\t\t\t// A timer is already running => NOOP\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t// Start the timer\r\n\t\t\t\t\tself.keepAliveTimer = setTimeout( function()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Deactivate current timer\r\n\t\t\t\t\t\t\tself.keepAliveTimer = null;\r\n\r\n\t\t\t\t\t\t\t// Send keepalive request\r\n\t\t\t\t\t\t\tvar req = new XMLHttpRequest();\r\n\t\t\t\t\t\t\treq.open( 'GET', self.keepAliveUrl );\r\n\t\t\t\t\t\t\treq.send();\r\n\r\n\t\t\t\t\t\t\t// Reactivate timer\r\n\t\t\t\t\t\t\tself.checkKeepAliveTimeout();\r\n\t\t\t\t\t\t}, self.keepAliveTimeout );\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif( self.keepAliveTimer != null )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// A timer is running => Stop it\r\n\t\t\t\t\t\tvar tm = self.keepAliveTimer;\r\n\t\t\t\t\t\tself.keepAliveTimer = null;\r\n\t\t\t\t\t\tclearTimeout( tm );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\tself.sendMessage = function(message:Message, callback?:(evt?:any,message?:Message)=>void)\r\n\t\t\t{\r\n\t\t\t\tself.pendingMessages.push({ message:message, callback:callback });\r\n\t\t\t\tself.sendPendingMessages();\r\n\t\t\t\treturn self;\r\n\t\t\t};\r\n\r\n\t\tself.sendPendingMessages = function() : void\r\n\t\t\t{\r\n\t\t\t\tif( self.getStatus() != ClientStatus.CONNECTED )\r\n\t\t\t\t\t// Connection not ready\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\tvar items = self.pendingMessages;\r\n\t\t\t\tself.pendingMessages = [];\r\n\r\n\t\t\t\tfor( var i=0; i<items.length; ++i )\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar message\t\t= items[i].message;\r\n\t\t\t\t\t\tvar callback\t= items[i].callback;\r\n\r\n\t\t\t\t\t\tif( callback != null )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Attach the callback to a new one-shot message handler\r\n\t\t\t\t\t\t\tvar replyMessageHandler = 'message_handler_autoreply_' + (++ self.sendMessageUid);\r\n\t\t\t\t\t\t\tmessage[ 'reply_to_type' ] = replyMessageHandler;\r\n\r\n\t\t\t\t\t\t\tself.bind( replyMessageHandler, function(evt, message)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// The message has returned => unbind the one-shot message handler\r\n\t\t\t\t\t\t\t\t\tself.unbind( replyMessageHandler );\r\n\r\n\t\t\t\t\t\t\t\t\t// Forward the message to the callback\r\n\t\t\t\t\t\t\t\t\tcallback( evt, message );\r\n\t\t\t\t\t\t\t\t} );\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar rootMessage = {\t'type'\t\t: 'messages',\r\n\t\t\t\t\t\t\t\t\t\t\t'messages'\t: [ message ] };\r\n\r\n\t\t\t\t\t\tif( self.debug )\r\n\t\t\t\t\t\t\tconsole.log( 'message send', message );\r\n\r\n\t\t\t\t\t\tvar strMessage = JSON.stringify( rootMessage );\r\n\t\t\t\t\t\tself.webSocket.send( strMessage );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch( err )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry { self.triggerInternalError( 'Unable to send message: '+err ); } catch(err) {}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t/////////////////////\r\n\r\n\t\t// Check URL's protocol\r\n\t\tvar url = document.createElement( 'a' );\r\n\t\turl.href = self.handlerUrl;\r\n\t\tif( (url.protocol != 'wss:') && (url.protocol != 'ws:') )\r\n\t\t{\r\n\t\t\tif( url.protocol == 'https:' )\r\n\t\t\t\turl.protocol = 'wss:';\r\n\t\t\telse\r\n\t\t\t\turl.protocol = 'ws:';\r\n\t\t}\r\n\t\tself.handlerUrl = url.href;\r\n\t}\r\n}  // class WebSocketClient\r\n\r\nexport default WebSocketClient;\r\n","\r\nimport { Client, MessageHandler, ClientStatus } from \"../../CommonLibs/Web/LongPolling/JSClient/Client\";\r\n\r\ndeclare global\r\n{\r\n\tinterface Window\r\n\t{\r\n\t\thome_index_init : (messageHandlerParameters:any)=>void;\r\n\t\tmessageHandler : MessageHandler;\r\n\t}\r\n}\r\n\r\nwindow.home_index_init = function init(messageHandlerParameters:any)\r\n{\r\n\tvar messageHandler = Client( messageHandlerParameters )\r\n\t\t\t\t\t\t\t.onStatusChanged( (status)=>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tlet str;\r\n\t\t\t\t\t\t\t\t\tswitch( status )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase ClientStatus.CONNECTED:\tstr = 'Connected';\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase ClientStatus.DISCONNECTED:\tstr = 'Disconnected';\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase ClientStatus.CONNECTED:\tstr = 'Connected';\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase ClientStatus.PENDING:\t\tstr = 'Pending';\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase ClientStatus.RUNNING:\t\tstr = 'Running';\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t$('#client-status').text( str );\r\n\t\t\t\t\t\t\t\t} )\r\n\t\t\t\t\t\t\t.onInternalError( (msg)=>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Something that should not happen ...\r\n\t\t\t\t\t\t\t\t\tconsole.error( 'An internal error occured:', msg );\r\n\t\t\t\t\t\t\t\t} )\r\n\t\t\t\t\t\t\t.onMessageHandlerFailed( (msg)=>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Something that should not happen either (e.g. a JSON response could not be parsed) ...\r\n\t\t\t\t\t\t\t\t\tconsole.error( 'A message handler failed:', msg );\r\n\t\t\t\t\t\t\t\t} )\r\n\t\t\t\t\t\t\t.onConnectionIdReceived( (connectionID)=>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// The connection to the server is now established\r\n\t\t\t\t\t\t\t\t} );\r\n\tmessageHandler.bind( 'exception', (evt,msg)=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// The server sent a generic exception message (e.g. a message sent to an inexistent message handler)\r\n\t\t\t\t\t\tconsole.error( 'The server sent an exception:', msg );\r\n\t\t\t\t\t} );\r\n\tmessageHandler.start();\r\n\r\n\t// Method 1: Send a 'TestTimeGet' message every seconds ...\r\n\tsetInterval( function()\r\n\t\t{\r\n\t\t\tconst request = {\ttype : 'TestTimeGet',\r\n\t\t\t\t\t\t\t\tincludeEpoch : true };\r\n\t\t\tmessageHandler.sendMessage( request, (evt,response)=>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst serverTime = `${response['time']} (Unix epoch: ${response['epoch']})`;\r\n\t\t\t\t\t$('#server-time-get').text( serverTime );\r\n\t\t\t\t} );\r\n\t\t}, 1000 );\r\n\r\n\t// Method 2: Ask the server to push the time\r\n\t{\r\n\t\t// Register a handler for the response messages\r\n\t\tmessageHandler.bind( 'receive-time-from-server', (evt,response)=>\r\n\t\t\t{\r\n\t\t\t\tconst serverTime = `${response['time']} (Unix epoch: ${response['epoch']}) ; To go: ${response['repeatsToGo']}`;\r\n\t\t\t\t$('#server-time-push').text( serverTime );\r\n\t\t\t} );\r\n\r\n\t\t$('#btn-test-push').click( ()=>\r\n\t\t\t{\r\n\t\t\t\t// Send a 'TestTimePush' message ...\r\n\t\t\t\tconst request = {\ttype : 'TestTimePush',\r\n\t\t\t\t\t\t\t\t\treply_to_type : 'receive-time-from-server',  // ... and receive its response to the 'receive-time-from-server' handler registered above\r\n\t\t\t\t\t\t\t\t\trepeat : 10,  // Push 10 responses\r\n\t\t\t\t\t\t\t\t\tincludeEpoch : true };\r\n\t\t\t\tmessageHandler.sendMessage( request );\r\n\t\t\t} );\r\n\t}\r\n\r\n\t// Example server exception\r\n\t$('#btn-test-crash').click( ()=>\r\n\t\t{\r\n\t\t\t// Send a 'TestCrash' message\r\n\t\t\tmessageHandler.sendMessage( { type : 'TestCrash' }, (evt,response)=>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Use the 2nd parameter to define the response handler instead of using 'messageHandler.bind()' as above\r\n\t\t\t\t\tconst json = JSON.stringify( response, null, 4 );\r\n\t\t\t\t\tshowTextDialogMessage( json, 'The server responded:' );\r\n\t\t\t\t} );\r\n\t\t} );\r\n\r\n\twindow.messageHandler = messageHandler;  // NB: Only so it can be used from the JavaScript's console\r\n}\r\n\r\nfunction showTextDialogMessage(msg, title)\r\n{\r\n\tvar $root = $('<div/>').attr( 'title', title );\r\n\tif( msg instanceof jQuery )\r\n\t\t$root.append( msg );\r\n\telse\r\n\t\t$root.append( $('<pre/>').text(msg) );\r\n\t$(document.body).append( $root );\r\n\t$root.dialog();\r\n}\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}